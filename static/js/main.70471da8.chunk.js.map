{"version":3,"sources":["components/Copyright.jsx","components/RestartButton.jsx","components/Board.jsx","App.js","index.js"],"names":["Container","styled","h2","Copyright","StyledButton","button","props","disabled","RestartButton","onClick","ORIGINAL_STATE","squareValues","1","2","3","4","5","6","7","8","9","xToPlay","gameOver","winner","ClickableSquare","value","StyledSquare","Board","state","index","this","currentValue","setState","prevState","console","log","detectGameOver","Object","values","every","val","checkWinner","player","line","checkEachLineForWin","Subheader","Table","resetGame","Component","table","div","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.70471da8.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\nconst Copyright = () => <Container>by dmithamo</Container>;\n\nconst Container = styled.h2`\n  background-color: grey;\n  color: white;\n  padding: 10px;\n  font-size: 12px;\n  border-radius: 5px;\n  text-align: center;\n`;\n\nexport default Copyright;\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst RestartButton = (props) => (\n  <StyledButton disabled={props.disabled} onClick={props.onClick}>\n    Restart\n  </StyledButton>\n);\n\nconst StyledButton = styled.button`\n  outline: none;\n  border: none;\n  background-color: ${(props) => (props.disabled ? '#D3D3D3' : 'black')};\n  color: white;\n  cursor: ${(props) => (props.disabled ? 'not-allowed' : 'pointer')};\n  margin-top: 20px;\n  border-radius: 10px;\n  width: 100px;\n  padding: 10px;\n  font-family: monospace;\n  font-weight: bold;\n  font-size: 14px;\n`;\n\nexport default RestartButton;\n","import React, { Component, Fragment } from 'react';\nimport styled from 'styled-components';\nimport RestartButton from './RestartButton';\n\nconst ORIGINAL_STATE = {\n  squareValues: {\n    1: '',\n    2: '',\n    3: '',\n    4: '',\n    5: '',\n    6: '',\n    7: '',\n    8: '',\n    9: '',\n  },\n  xToPlay: true,\n  gameOver: false,\n  winner: 'Draw',\n};\n\nconst ClickableSquare = (props) => {\n  const { value, gameOver } = props;\n  return (\n    <td>\n      <StyledSquare disabled={gameOver ? true : false} onClick={props.onClick}>\n        {value}\n      </StyledSquare>\n    </td>\n  );\n};\n\nclass Board extends Component {\n  constructor(props) {\n    super(props);\n    // Needs to manage state of entire board\n    this.state = { ...ORIGINAL_STATE };\n  }\n\n  async onClick(index) {\n    // Needs to be an async function.\n    // Ensures move is recorded before detectGameOver is called\n    const { gameOver, xToPlay } = this.state;\n    if (!gameOver) {\n      const currentValue = this.state.squareValues[index];\n      await (currentValue === ''\n        ? xToPlay\n          ? this.setState((prevState) => ({\n              ...prevState,\n              squareValues: { ...prevState.squareValues, [index]: 'X' },\n              xToPlay: false,\n            }))\n          : this.setState((prevState) => ({\n              ...prevState,\n              squareValues: { ...prevState.squareValues, [index]: 'O' },\n              xToPlay: true,\n            }))\n        : console.log('You kent play here!'));\n\n      // Check if gameOver\n      this.detectGameOver();\n    } else {\n      console.log('Issover bruh!');\n    }\n  }\n\n  detectGameOver() {\n    // If all boxes are filled (deadlock)\n    let arrayOfSquareValues = Object.values(this.state.squareValues);\n    const gameOver = arrayOfSquareValues.every((val) => val !== '');\n    gameOver && this.setState({ gameOver });\n\n    //Also check if someone won\n    this.checkWinner('X');\n    this.checkWinner('O');\n  }\n\n  checkWinner(player) {\n    const { squareValues } = this.state;\n    // Rows\n    const rowOneVals = [squareValues[1], squareValues[2], squareValues[3]];\n    const rowTwoVals = [squareValues[4], squareValues[5], squareValues[6]];\n    const rowThreeVals = [squareValues[7], squareValues[8], squareValues[9]];\n    // Columns\n    const colOneVals = [squareValues[1], squareValues[4], squareValues[7]];\n    const colTwoVals = [squareValues[2], squareValues[5], squareValues[8]];\n    const colThreeVals = [squareValues[3], squareValues[6], squareValues[9]];\n\n    // Diagonals\n    const diagOne = [squareValues[1], squareValues[5], squareValues[9]];\n    const diagTwo = [squareValues[3], squareValues[5], squareValues[7]];\n\n    // Run each line thro the win checking test\n    for (let line of [\n      rowOneVals,\n      rowTwoVals,\n      rowThreeVals,\n      colOneVals,\n      colTwoVals,\n      colThreeVals,\n      diagOne,\n      diagTwo,\n    ]) {\n      this.checkEachLineForWin(line, player);\n    }\n  }\n\n  checkEachLineForWin(line, player) {\n    const gameOver = line.every((val) => val === player);\n    gameOver &&\n      this.setState({ gameOver, winner: player === 'X' ? 'X won' : 'O won' });\n  }\n\n  async resetGame() {\n    //Restore original state\n    await this.setState({ ...ORIGINAL_STATE });\n  }\n\n  render() {\n    const { squareValues, xToPlay, gameOver, winner } = this.state;\n    return (\n      <Fragment>\n        <Subheader>{`${\n          !gameOver\n            ? xToPlay\n              ? 'X to play'\n              : 'O to play'\n            : `Game over! ${winner}`\n        }`}</Subheader>\n        <Table>\n          <tbody>\n            <tr>\n              <ClickableSquare\n                onClick={() => this.onClick(1)}\n                value={squareValues[1]}\n                gameOver={gameOver}\n              />\n              <ClickableSquare\n                onClick={() => this.onClick(2)}\n                value={squareValues[2]}\n                gameOver={gameOver}\n              />\n              <ClickableSquare\n                onClick={() => this.onClick(3)}\n                value={squareValues[3]}\n                gameOver={gameOver}\n              />\n            </tr>\n            <tr>\n              <ClickableSquare\n                onClick={() => this.onClick(4)}\n                value={squareValues[4]}\n                gameOver={gameOver}\n              />\n              <ClickableSquare\n                onClick={() => this.onClick(5)}\n                value={squareValues[5]}\n                gameOver={gameOver}\n              />\n              <ClickableSquare\n                onClick={() => this.onClick(6)}\n                value={squareValues[6]}\n                gameOver={gameOver}\n              />\n            </tr>\n            <tr>\n              <ClickableSquare\n                onClick={() => this.onClick(7)}\n                value={squareValues[7]}\n                gameOver={gameOver}\n              />\n              <ClickableSquare\n                onClick={() => this.onClick(8)}\n                value={squareValues[8]}\n                gameOver={gameOver}\n              />\n              <ClickableSquare\n                onClick={() => this.onClick(9)}\n                value={squareValues[9]}\n                gameOver={gameOver}\n              />\n            </tr>\n          </tbody>\n        </Table>\n        <RestartButton\n          disabled={gameOver ? false : true}\n          onClick={() => this.resetGame()}\n        />\n      </Fragment>\n    );\n  }\n}\n\nconst StyledSquare = styled.button`\n  color: black;\n  font-family: monospace;\n  font-weight: bold;\n  font-size: 80px;\n  padding: 10px;\n  text-align: center;\n  width: 100px;\n  height: 100px;\n  cursor: ${(props) => (props.disabled ? 'not-allowed' : 'pointer')};\n  border: 1px solid black;\n  outline: none;\n`;\n\nconst Table = styled.table`\n  border: 1px solid black;\n  border-collapse: collapse;\n`;\n\nconst Subheader = styled.div`\n  color: black;\n  font-family: monospace;\n  font-weight: bold;\n  font-size: 20px;\n`;\n\nexport default Board;\n","import React from 'react';\nimport styled from 'styled-components';\nimport Copyright from './components/Copyright';\nimport Board from './components/Board';\n\nconst App = () => (\n  <Container>\n    <header>\n      <h1>Tic to the Tac Toe</h1>\n      <Copyright />\n      <Board />\n    </header>\n  </Container>\n);\n\nconst Container = styled.div`\n  display: flex;\n  width: 50%;\n  align-items: center;\n  margin: auto;\n  text-align: center;\n`;\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}